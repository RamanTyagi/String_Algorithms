Question : https://leetcode.com/problems/implement-strstr/

Phla index btana hai string mein , jahan se pattern mil rha hai !
m = text.size()
n = pattern.size()

Brute Force Approach :{ T.c : O(m*n) }
-> Traverse kro hr ek n length ke lie text mein
-> Phli substring jo pattern ke equal hai us index ko return krdo!

Optimised Approach:
1. KMP Algorithm {T.c : O(m+n)}:

 Approach :
 1. Make longest prefix-suffix(lps) array { To save time from again and again traversing pattern for pattern matching!!}
 2. KMP wali Approach lga do
 
 Code : 
 class Solution {
public:
    int strStr(string haystack, string needle) {
        if(needle.size()==0)
            return 0;
        int n = needle.size();
        vector<int> lps(n,0);
        int prevLPS = 0;
        int i = 1;
        while(i<n)
        {
            if(needle[i]==needle[prevLPS])
            {
                lps[i]=prevLPS+1;
                prevLPS+=1;
                i++;
            }
            else if(prevLPS==0)
            {
                lps[i]=0;
                i++;
            }
            else
                prevLPS = lps[prevLPS-1];
        }
        i=0;
        int j = 0;
        while(i<haystack.size())
        {
            if(haystack[i]==needle[j])
            {
                i+=1;
                j+=1;
            }
            else
            {
                if(j==0)  // Agr phle character of pattern hi equal nhi hai to pattern matching ka sawal hi nhi hai -> Aage bdho!!!!
                    i+=1;
                else
                    j = lps[j-1]; // j-1 tk ke elements ka scene sorted hai kyuki pattern to j pe aake break hua hai na!!
            }
            if(j==n)
                return i-n; // First occurence nikalne ke lie!!!!
        }
        return -1;
    }
};
Que link : https://www.codingninjas.com/codestudio/problems/1115738
2. Rolling hash / Rabin Karp Algorithm : { T.c : O(m+n) <On an avg.>}

   Approach:
   1. Calculate the hash for the pattern.
   2. Calculate the hash for the first Window in text.
   3. Repeat the following (Untill the text ends)
      (a) If Hash(pat) == Hash(text-window)
          -> then match characters one by one.
      (b) Subtract leftmost(MSB) from the Hash(text-window)
      (c) Shift entire hash(text-window) by 1 unit to the left
      (d) Add new character added to the window
      
   Code:
    #include<bits/stdc++.h>
    #define d 256 

    vector<int> search(string pat, string txt, int q) 
    { 
        vector<int> res;
        int M = pat.size(); 
        int N = txt.size(); 
        int i, j; 
        int p = 0; // hash value for pattern 
        int t = 0; // hash value for txt 
        int h = 1; // This is used for the removal of the leftmost character of the previous window!!

        // The value of h would be "pow(d, M-1)%q" 
        for (i = 0; i < M - 1; i++) 
            h = (h * d) % q; 

        // Calculate the hash value of pattern and first 
        // window of text 
        for (i = 0; i < M; i++) 
        { 
            p = (d * p + pat[i]) % q; 
            t = (d * t + txt[i]) % q; 
        } 

        // Slide the pattern over text one by one 
        for (i = 0; i <= N - M; i++) 
        { 

            // Check the hash values of current window of text 
            // and pattern. If the hash values match then only 
            // check for characters one by one 
            if ( p == t ) 
            {   
                /* Check for characters one by one */
                for (j = 0; j < M; j++) 
                { 
                    if (txt[i+j] != pat[j])
                    {
                      break;
                    }
                } 

                // if p == t and pat[0...M-1] = txt[i, i+1, ...i+M-1] 

                if (j == M) 
                    res.push_back(i); 
            } 

            // Calculate hash value for next window of text: Remove 
            // leading digit, add trailing digit 
            if ( i < N-M ) 
            { 
                t = (d*(t - txt[i]*h) + txt[i+M])%q; 
                /* (t-txt[i]*h) -> Removal of the leftmost character 
                    multiply the res we get from above with d make them the contenders for the next window
                    Adding (i+M)th charcter added the 0th character to the window and hence makes the window complete!
                */
                 // We might get negative value of t, converting it 
                // to positive 
                if (t < 0) 
                t = (t + q); 
                /*
                    Maanle
                    T tha -2 aur q hai 5
                    Remainder hmesa positive rehna chaiye ye condition hoti hai
                    Agr tu -2 mod 5 krega to wo negative rehvega
                    Ise +ve me krne ke liye jise mod lere.ho usse add krde
                    (T + q) mod q= t mod q + q mod q=> t mod q + 0
                */
            } 
        }
        return res;
    } 
    vector<int> stringMatch(string &str, string &pat) {
        // Write your code here
        int q = 1001;
        return search(pat,str,q);
    }
